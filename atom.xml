<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://luoyil.github.io/</id>
    <title>LuoYi Blog</title>
    <updated>2020-07-19T04:29:14.909Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://luoyil.github.io/"/>
    <link rel="self" href="https://luoyil.github.io//atom.xml"/>
    <subtitle>LuoYi&apos;s Test Blog</subtitle>
    <logo>https://luoyil.github.io//images/avatar.png</logo>
    <icon>https://luoyil.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, LuoYi Blog</rights>
    <entry>
        <title type="html"><![CDATA[MC-CmdAnimeEngine 使用说明]]></title>
        <id>https://luoyil.github.io//post/mc-cmdanimeengine-shi-yong-shuo-ming</id>
        <link href="https://luoyil.github.io//post/mc-cmdanimeengine-shi-yong-shuo-ming">
        </link>
        <updated>2020-07-10T08:06:41.000Z</updated>
        <summary type="html"><![CDATA[<p>一个基于Minecraft 原版指令的动画引擎</p>
]]></summary>
        <content type="html"><![CDATA[<p>一个基于Minecraft 原版指令的动画引擎</p>
<!-- more -->
<h1 id="一-particle-模块">一、particle 模块</h1>
<hr>
<h2 id="功能基于简单的数学运算生成几何图形-图片等粒子指令">功能：基于简单的数学运算生成几何图形、图片等粒子指令</h2>
<hr>
<h2 id="代码说明">代码说明：</h2>
<ol>
<li>
<h3 id="class-particlecommand用于创建命令对象">class ParticleCommand:用于创建命令对象</h3>
</li>
</ol>
<p>参数</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
</tr>
</thead>
<tbody>
<tr>
<td>tick</td>
<td>int</td>
</tr>
<tr>
<td>command</td>
<td>text</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>
<h3 id="class-particlemath坐标数学运算类">class ParticleMath：坐标数学运算类</h3>
</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>precision</td>
<td>float</td>
<td>计算精度，越小粒子越密集</td>
</tr>
</tbody>
</table>
<p>功能：</p>
<ol>
<li>distance：获取两点距离<br>
参数：</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>p1,p2</td>
<td>list</td>
<td>包含xyz的列表，如<code>[0, 0, 0]</code></td>
</tr>
</tbody>
</table>
<ol start="2">
<li>vec_unit：向量单位化</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>p1,p2</td>
<td>list</td>
<td>空间坐标点，如<code>[0, 0, 0]</code></td>
</tr>
</tbody>
</table>
<ol start="3">
<li>midpoint：点列中点计算</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>points_list</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
</tbody>
</table>
<ol start="4">
<li>move：移动点列</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>points</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
<tr>
<td>x, y, z</td>
<td>float</td>
<td>坐标移动量</td>
</tr>
</tbody>
</table>
<ol start="5">
<li>ani_move：通过两个点列中每个点距离差计算粒子初速度</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>points_1，2</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
</tbody>
</table>
<p>返回：motion_list （每个粒子的初速度列表，与参数中点列格式一致）供粒子移动动画使用。<br>
6. ani_spread_from_point：计算粒子从一个点扩散开各自所需初速度<br>
参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>points_list</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
<tr>
<td>x, y, z</td>
<td>float</td>
<td>扩散中心坐标</td>
</tr>
<tr>
<td>zoom</td>
<td>float</td>
<td>缩放程度</td>
</tr>
</tbody>
</table>
<p>返回：motion_list</p>
<ol start="3">
<li>
<h3 id="class-particlegeometry几何图形坐标计算">class ParticleGeometry：几何图形坐标计算</h3>
</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>precision</td>
<td>float</td>
<td>计算精度，越小粒子越密集</td>
</tr>
</tbody>
</table>
<p>功能：</p>
<ol>
<li>line：生成连接两点的直线坐标</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>x1, y1, z1, x2, y2, z2</td>
<td>float</td>
<td>两点坐标</td>
</tr>
</tbody>
</table>
<p>返回：点列</p>
<ol start="4">
<li>
<h3 id="class-particleimg图片导入">class ParticleImg：图片导入</h3>
</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>precision</td>
<td>float</td>
<td>计算精度，越小粒子越密集</td>
</tr>
</tbody>
</table>
<p>功能：</p>
<ol>
<li>load_img：读取图片像素点坐标<br>
参数：</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>filename</td>
<td>text</td>
<td>图片名（图片需存放于images文件夹下）</td>
</tr>
<tr>
<td>x0, y0, z0</td>
<td>float</td>
<td>生成位置坐标</td>
</tr>
<tr>
<td>zoom_level</td>
<td>float</td>
<td>图片缩放程度，推荐5</td>
</tr>
</tbody>
</table>
<ol start="5">
<li>
<h3 id="class-particlecommandgenerator指令生成">class ParticleCommandGenerator：指令生成</h3>
</li>
</ol>
<p>参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>precision</td>
<td>float</td>
<td>计算精度，越小粒子越密集</td>
</tr>
</tbody>
</table>
<p>功能：</p>
<ol>
<li>static_particle：生成静态粒子命令<br>
参数：</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>start_tick, end_tick</td>
<td>int</td>
<td>动画开始时间与结束时间</td>
</tr>
<tr>
<td>points_list</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
<tr>
<td>name</td>
<td>text</td>
<td>粒子名，如<code>fireworksSpark</code></td>
</tr>
<tr>
<td>motion</td>
<td>text</td>
<td>粒子范围，需特殊格式，如<code>&quot;0 0 0&quot;</code></td>
</tr>
<tr>
<td>speed</td>
<td>float</td>
<td>粒子速度</td>
</tr>
<tr>
<td>amount</td>
<td>int</td>
<td>粒子数量</td>
</tr>
</tbody>
</table>
<ol start="2">
<li>point_motion_particle：生成粒子动画(同起点运动)<br>
参数：</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>tick</td>
<td>int</td>
<td>开始时间</td>
</tr>
<tr>
<td>motion_list</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
<tr>
<td>position</td>
<td>text</td>
<td>动画生成位置，需特殊格式，如<code>0 0 0</code>，这里将会填入/particle <code>x y z</code> 中</td>
</tr>
<tr>
<td>name</td>
<td>text</td>
<td>粒子名，如<code>fireworksSpark</code></td>
</tr>
<tr>
<td>speed</td>
<td>float</td>
<td>粒子速度</td>
</tr>
</tbody>
</table>
<ol start="3">
<li>motion_particle：生成粒子动画（不同起点运动）<br>
参数：</li>
</ol>
<table>
<thead>
<tr>
<th>参数</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>points_list</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
<tr>
<td>motion_list</td>
<td>list</td>
<td>点列，如<code>[[0, 0, 0], [0, 1, 0]]</code></td>
</tr>
<tr>
<td>tick</td>
<td>int</td>
<td>开始时间</td>
</tr>
<tr>
<td>name</td>
<td>text</td>
<td>粒子名，如<code>fireworksSpark</code></td>
</tr>
<tr>
<td>speed</td>
<td>float</td>
<td>粒子速度</td>
</tr>
</tbody>
</table>
<ol start="6">
<li>
<h3 id="class-fireworkcommand烟花类">class FireworkCommand：烟花类</h3>
</li>
</ol>
<h1 id="二-function-模块">二、function 模块</h1>
<hr>
<h2 id="功能将其它模块生成的指令处理后按tick导出为mcfunction文件-用于游戏内执行指令序列">功能：将其它模块生成的指令处理后按tick导出为mcfunction文件。用于游戏内执行指令序列。</h2>
<hr>
<h2 id="代码说明-2">代码说明：</h2>
<h3 id="class-function创建该对象时需要一个序列长度即使用其它模块生成的命令一共需要执行的tick时长">class Function：创建该对象时需要一个序列长度，即使用其它模块生成的命令一共需要执行的tick时长</h3>
<p>例：以下代码创建了一个20Tick的直线粒子动画，并将其导出为mcfunction。</p>
<pre><code># 导入particle模块， function模块
import particle
import function as fs
# 创建粒子几何运算对象
pg = particle.ParticleGeometry(0.1)
# 创建粒子指令生成工具对象
pcmd = particle.ParticleCommandGenerator(0.1)

# 创建一条从0, 0, 0到 10, 10, 10直线
line = pg.line(0, 0, 0, 10, 10, 10)
# 使用粒子命令生成工具生成指令列表
pcmd.static_particle(0, 20, line, 'endRod', '0 0 0', 0, 1)
# 将生成后的指令列表赋于变量 'command_list'
command_list = pcmd.particle_cmd_list
# 创建函数对象
function = fs.Function(21)
# 创建空序列，用于存放指令
function.create_null_list()
# 创建指令序列
function.create_sequence(command_list)
# 导出函数至 'ly' 文件夹
function.save_file('ly')

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[image bed test]]></title>
        <id>https://luoyil.github.io//post/image-test</id>
        <link href="https://luoyil.github.io//post/image-test">
        </link>
        <updated>2020-06-26T05:46:21.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://luoyil.github.io//post-images/1593150435451.jpg" alt=""><br>
<img src="https://luoyil.github.io//post-images/1595132443848.png" alt=""><br>
<img src="https://luoyil.github.io//post-images/1595132944383.png" alt=""></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Minecraft-红石音乐教程#1]]></title>
        <id>https://luoyil.github.io//post/minecraft-hong-shi-yin-le-jiao-cheng-1</id>
        <link href="https://luoyil.github.io//post/minecraft-hong-shi-yin-le-jiao-cheng-1">
        </link>
        <updated>2020-03-10T10:08:46.000Z</updated>
        <summary type="html"><![CDATA[<p>本期教程是对完全零基础的玩家做准备</p>
]]></summary>
        <content type="html"><![CDATA[<p>本期教程是对完全零基础的玩家做准备</p>
<!-- more -->  
<h1 id="一-准备">一、准备</h1>
<hr>
<h2 id="1游戏版本">1.游戏版本</h2>
<p>教程中游戏版本使用Java国际版 <code>1.12.2</code> 或<code>1.14.4</code></p>
<ul>
<li>如果想用音符盒制作红石音乐 强烈推荐使用 <code>1.14.4</code></li>
<li>如果想使用命令制作则两者均可</li>
</ul>
<h2 id="2游戏mod可选">2.游戏mod(可选)</h2>
<ul>
<li>QuickCarpet 调试mod（暂时用于1.14+变速）</li>
<li>TickrateChanger 变速</li>
<li>Extend Polyphony Limit 解除发音上限（防止爆音漏音）</li>
<li>WorldEdit 快速建造</li>
<li>Replay 摄影回放</li>
</ul>
<h2 id="3辅助软件可选">3.辅助软件（可选）</h2>
<ul>
<li>FL Studio</li>
</ul>
<blockquote>
<p>另外，我将我所使用的整合包上传到了我的QQ群中，需要可以去下载</p>
</blockquote>
<h1 id="二-基本原理">二、基本原理</h1>
<hr>
<h2 id="1音符盒基础">1.音符盒基础</h2>
<blockquote>
<p>注意：由于网络问题，图片可能加载不完全，建议配合Mine craft Wiki 查看本教程<br>
<a href="https://minecraft-zh.gamepedia.com/%E9%9F%B3%E7%AC%A6%E7%9B%92">音符盒</a><br>
<a href="https://minecraft-zh.gamepedia.com/%E6%95%99%E7%A8%8B/%E7%BA%A2%E7%9F%B3%E9%9F%B3%E4%B9%90">红石音乐</a></p>
</blockquote>
<h3 id="1音符盒">（1）音符盒：</h3>
<p>音符盒在接受红石信号或者被玩家点击后会根据它下面的方块种类而发出不同音色的声音。右键音符盒可以改变音符盒的音高。</p>
<ul>
<li>以下为音符盒音色，音域及其它信息</li>
<li>在音符盒下面放置这些方块可以改变音符盒音色</li>
</ul>
<table>
<thead>
<tr>
<th>方块</th>
<th>音色</th>
<th>音域</th>
</tr>
</thead>
<tbody>
<tr>
<td>金块</td>
<td>铃铛</td>
<td>F♯5–F♯7</td>
</tr>
<tr>
<td>其它</td>
<td>竖琴</td>
<td>F♯3–F♯5</td>
</tr>
</tbody>
</table>
<p>更多可以查阅 <a href="https://minecraft-zh.gamepedia.com/%E9%9F%B3%E7%AC%A6%E7%9B%92">音符盒</a> 页面</p>
<h3 id="2音符盒音高">（2）音符盒音高：</h3>
<p>每右键音符盒一次，音符盒音高+1。下图为对应音高需要右键的次数。<br>
<img src="https://minecraft-zh.gamepedia.com/File:Noteblock_reference.png" alt="音符盒音高点击次数对照"><br>
<code>红石音乐</code> 页面有所有音色对应音域及点击次数表。</p>
<h3 id="3五线谱-可选">（3）五线谱 （可选）</h3>
<p>这是一段<code>Da Da Da Piano solo</code>的乐谱<br>
<img src="https://luoyil.github.io//post-images/1583846548419.png" alt="乐谱图片"></p>
<blockquote>
<p>由于内容较多，关于五线谱读法建议去网上查看教程，这里只会提及部分<br>
另外，如果实在不会可以看之后的mid读法。</p>
</blockquote>
<h4 id="1曲速bpm">1.曲速（BPM）：</h4>
<p><code>BPM</code> = Beat Per Minute，每分钟节拍数的单位。<br>
上图中就代表这首歌的BPM为174（音符图标的等号后）<br>
先作为了解，等会讲在游戏中如何对应</p>
<h4 id="2线">2.线：</h4>
<p>在五线谱上，<code>音的高低</code>是根据<code>音符符头</code>在五线谱上的<code>位置</code>而定的。<br>
位置越高音越高，位置越低音越低。<br>
音符的符头可以记在<code>线上或间</code>内。（间：指两条线之间）<br>
为了记录更高或更低的音，在五线谱的上面或下面还要加上许多短线，<br>
这些短线，就叫 做<code>加线</code>。<br>
如图：<br>
<img src="https://luoyil.github.io//post-images/1583847328944.png" alt="线"></p>
<h4 id="3谱号">3.谱号：</h4>
<p><img src="https://luoyil.github.io//post-images/1583847540170.png" alt="谱号图片"><br>
这两个符号分别代表高音谱号（G谱号），低音谱号（F谱号）<br>
G谱号圈住的那一条线的音高就是G，F谱号的两点“：”之间的线音高就是F<br>
下图标出了部分音高在五线谱上的对应：<br>
<img src="https://luoyil.github.io//post-images/1583847556521.png" alt="音高在线上的对应图"></p>
<h4 id="4变音记号">4.变音记号：</h4>
<p>表示音级的升高或降低的记号，叫做“变音记号”。<br>
变音记号有五种：<br>
<img src="https://luoyil.github.io//post-images/1583847659534.png" alt="变音记号"><br>
变音记号可以记在线上或间上。<br>
记在谱号后面的变音记号，叫做“调号”。<br>
调号中的变音记号，在未改变调号之前，对乐音体系中所有同名音，<br>
不管哪个音组，都有效。<br>
比如说我在音高为C的那一条线上加了一个升号，那么在未改变调号之前所有的C都变为升C（C#），不管是C1,C2...都要变为相应的C#1，C#2...</p>
<h4 id="5常见符号">5.常见符号</h4>
<p><img src="https://luoyil.github.io//post-images/1583847783461.png" alt="常见音符"><br>
<img src="https://luoyil.github.io//post-images/1583847796874.png" alt="附点音符"></p>
<h4 id="6中央c">6.中央C：</h4>
<p>中央C有多种定义，一般定位C4，在FL软件中为C5，其它自行查阅。<br>
G谱号的下加一线为中央C，F谱号上加一线也是中央C。</p>
<h2 id="2试着用音符盒来做一段音乐">2.试着用音符盒来做一段音乐</h2>
<p>一般步骤为：</p>
<pre><code>1.读谱，确定音符盒点击次数
2.根据音符类型，BPM，利用中继器控制每个音的间隔时间
</code></pre>
<p>1.先来读谱<br>
上面那行为：B5， B5， B5， F#6...<br>
下面那行为：E4， B4， E5， F#5...<br>
你可以去上面的音高表查找需要敲击音符盒次数<br>
2.确定音色，敲击次数<br>
这里选了铃铛，竖琴的音色，所对应音域为F♯5–F♯7， F♯3–F♯5。<br>
暂定上面那行使用铃铛音色<br>
那么相应的敲击次数为：5， 5， 5， 12（可由<code>红石音乐</code> 页面的音色对应音域及点击次数表查到。）<br>
下面那行使用竖琴，相应敲击次数为：10， 17， 22， 24，<br>
现在你会发现有个音是G#5，不在竖琴音域内。之后讲音域处理方法。（当然，如果你觉得听起来还行可以直接使用铃铛音色来演奏这个音）<br>
3.确定中继器挡位：<br>
这首歌BPM为174，原版并无匹配（BPM与中继器对照表见<code>红石音乐</code> 页面）<br>
最接近它的是150，暂时用它来做，虽然慢了一点，之后讲变速。<br>
前几个音符为四分音符，所以每两个音符盒间的中继器应为四档（右键3下）<br>
4.最后将它们放好：如图<br>
<img src="https://luoyil.github.io//post-images/1583896205706.jpg" alt=""><br>
5.音域处理：<br>
建议先观察乐谱最高音与最低音是什么，然后参考音符盒音域选定音色。<br>
如果都不适合可以将整个乐谱降低或升高一定半音来解决。<br>
6.速度处理：<br>
刚才将BPM为174的音乐以BPM150来制作。听起来比原曲慢，现在可以使用Tickrate Changer来变速。</p>
<ul>
<li>指令：/tickrate <code>tick</code><br>
原版是每秒20tick,每tick时长为0.05秒，174是150的1.16倍，那将刚才的速度变为原曲速度则输入/tickrate 23.2 (20 X 1.16得出)</li>
</ul>
<center>--------------------音符盒基础-完---------------------</center>  
<h2 id="2命令方块基础">2.命令方块基础</h2>
<h3 id="0获得一个命令方块">0.获得一个命令方块</h3>
<p><code>/give @p command_block</code></p>
<h3 id="1playsound命令">1.playsound命令</h3>
<p>参考<a href="https://minecraft-zh.gamepedia.com/%E5%91%BD%E4%BB%A4/playsound">playsound</a><br>
格式<code>playsound &lt;声音&gt; &lt;来源&gt; &lt;玩家&gt; [x] [y] [z] [音量] [音调] [最小音量]</code><br>
例子：<br>
调用原版音符盒音色：<br>
<code>/playsound minecraft:block.note.chime voice @p ~ ~ ~ 1 1</code><br>
调用指定资源包音色：<br>
可以在<code>\assets\minecraft</code>下找到<code>sounds.json</code>这个文件中存放了声音事件名与文件路径。<br>
如我的FL Keys资源包：<br>
这是第一行<code>&quot;piano.1&quot;:{&quot;sounds&quot;:[{&quot;name&quot;:&quot;piano.1&quot;}]},</code><br>
<code>piano.1</code>是声音名代表钢琴第一个键（A0，FL中为A1，21）， <code>&quot;name&quot;:&quot;piano.1</code>这是文件所在路径。<br>
调用它的命令为：<br>
<code>/playsound piano.1 voice @p ~ ~ ~ 1 1</code></p>
<h3 id="2fl中mid读法">2.FL中mid读法</h3>
<p>1.拖拽一个mid文件至FL可以将它导入，点击左边的音轨可以打开钢琴窗口，鼠标指向一个音符时左上角会有音高显示。<br>
<img src="https://luoyil.github.io//post-images/1583897433020.png" alt="FL"></p>
<h3 id="3配合资源包制作音乐">3.配合资源包制作音乐</h3>
<p>根据资源包不同，大多作者都会说明哪个文件是哪一个音高。<br>
比如我的FL Keys，<code>piano.1</code>为音高21，那之前的乐谱数字音高为83，83，83，90...<br>
写成play sound命令依次为：</p>
<blockquote>
<p><code>/playsound piano.63 voice @p ~ ~ ~ 1 1</code><br>
<code>/playsound piano.63 voice @p ~ ~ ~ 1 1</code><br>
<code>/playsound piano.63 voice @p ~ ~ ~ 1 1</code><br>
<code>/playsound piano.69 voice @p ~ ~ ~ 1 1</code></p>
</blockquote>
<ul>
<li>使用这类资源包没有音域限制，可以直接读音高然后写成命令，每个音间隔处理和音符盒相同。</li>
</ul>
<h3 id="4注意">4.注意：</h3>
<p>由于人物移动，直接像这样写命令声音会在命令方块所在位置播放，建议加个<code>execute</code>嵌套，使playsound命令执行位置始终为玩家。<br>
参考页面：<a href="https://minecraft-zh.gamepedia.com/%E5%91%BD%E4%BB%A4/execute">execute</a></p>
<center>--------------------基本原理-完---------------------</center>  
<p>现在你可以去制作你喜欢的音乐了<code>(*^▽^*)</code></p>
<blockquote>
<p>写于2020-3-10~11.下期再见。</p>
</blockquote>
]]></content>
    </entry>
</feed>